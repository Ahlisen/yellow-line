<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup
screenShake = 0;
addedShake = 0;
targetX = 0;
targetY = 0;
viewHeightStandard = view_hview[0];
viewWidthStandard = view_wview[0];
viewHeightTarget = viewHeightStandard;
viewWidthTarget = viewWidthStandard;
viewHeight = viewHeightStandard;
viewWidth = viewWidthStandard;

frame = sFrame;
image_speed = ANIMATION; //18 fps

priority = ds_priority_create();
alarm[0] = room_speed; //Call sorter
array = array_create(instance_number(oVehicle));
ranking = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy ds
ds_priority_destroy(priority);
ds_list_destroy(ranking);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sort vehicles according to distance
if(!oRaceManager.raceFinished) {
    ranking = sort_vehicles(priority,ranking);
    alarm[0] = room_speed/2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Follow first

//first = instance_nearest(oNodeManager.active.x,oNodeManager.active.y, oVehicle);
first = ds_list_find_value(ranking,0);
second = ds_list_find_value(ranking,1);

firstDistance = point_distance(first.x,first.y,oNodeManager.active.x,oNodeManager.active.y);
secondDistance = point_distance(second.x,second.y,oNodeManager.active.x,oNodeManager.active.y);

var threshold = 100;
var difference = secondDistance - firstDistance;
if(difference &lt; threshold) {
    var percent = difference/threshold;
    tarX = first.x*percent+second.x*(1-percent);
    tarY = first.y*percent+second.y*(1-percent);
} else {
    tarX = first.x;
    tarY = first.y;
}
/*
var maxX = max(array[0].x,array[1].x,array[2].x);
var minX = min(array[0].x,array[1].x,array[2].x);
var maxY = max(array[0].y,array[1].y,array[2].y);
var minY = min(array[0].y,array[1].y,array[2].y);
var tarX = minX+((maxX-minX)/2);
var tarY = minY+((maxY-minY)/2);
*/

if(!oRaceManager.raceFinished) {
    targetX = (tarX+first.x)/2 - view_wview[0]*.5  + first.phy_speed_x*32;
    targetY = (tarY+first.y)/2 - view_hview[0]*.5  + first.phy_speed_y*32;
    screenShake = first.phy_speed/10+first.boost;

} else {
    targetX = oNodeManager.active.x - view_wview[0]*.5
    targetY = oNodeManager.active.y - view_hview[0]*.5
    screenShake = 0;
}
var shake = screenShake+addedShake;

view_xview[0] += (targetX - view_xview[0])*0.03 + random_range(-shake,shake);
view_yview[0] += (targetY - view_yview[0])*0.03 + random_range(-shake,shake);
    
if(addedShake &gt; 0) {
    addedShake -= 0.25;
} else {
    addedShake = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control cinematic frame &amp;&amp; zooming

//TODO: Add when animation ends go back to sFrame;

background_x[0] += 0.2;
background_y[0] -= 0.05;

viewHeight = lerp(viewHeight, viewHeightTarget, 0.1);
viewWidth = lerp(viewWidth, viewWidthTarget, 0.1);

view_hview[0] = viewHeight;
view_wview[0] = viewWidth;

if(keyboard_check_pressed(ord('X'))) {
    viewHeightTarget /= 2;
    viewWidthTarget /= 2;
}

if(keyboard_check_pressed(ord('C'))) {
    viewHeightTarget *= 2;
    viewWidthTarget *= 2;
}

if(keyboard_check_pressed(ord('V'))) {
    viewHeightTarget = viewHeightStandard;
    viewWidthTarget = viewWidthStandard;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw player positions &amp; cutscene?

for(var i = 0; i &lt; ds_list_size(ranking); i++) {
    var driver = ds_list_find_value(ranking,i);
    driver.portraitY += (4+i*32 - driver.portraitY)*0.03;
    draw_sprite_ext(sDriver,driver.portraitImage,4,driver.portraitY,1,1,0,driver.color,1);
    for(var j = 0; j &lt;driver.missiles; j++) {
        draw_sprite(sMissileIcon,0,36+j*7,driver.portraitY+4);
    }
    for(var j = 0; j &lt;driver.boosts; j++) {
        draw_sprite(sBoostIcon,0,36+j*7,driver.portraitY+16);
    }
}

//draw_sprite_ext(frame,image_index,0,view_hport[0],1,1,0,image_blend,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
