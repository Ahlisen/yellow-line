<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create linked list
queue = ds_queue_create();
_x = 0;
_y = 0;
last = noone;
child = noone;
first = noone;
active = noone;
roadDirection = -45;
hue = 0;
depth = 100000;
nodeCount = 4000;
turnCount = 10;
detectionRange = 256;

for(var i = 0; i&lt;6; i++) {
    var _x = lengthdir_x(detectionRange,roadDirection);
    var _y = lengthdir_y(detectionRange,roadDirection);
    var node = instance_create(x+i*_x,y+i*_y,oNode);
    if(i == 0) {
        first = node;
        child = node;
    }
    if(i == 4) {
        active = node;
    }
    if(last) {
        node.parent = last;
        last.child = node;
        child = node;
    }
    last = node;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Surface
rope_surface = surface_create(view_wview[0],view_hview[0])
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control &amp; Draw nodes

surface_set_target(rope_surface)
draw_clear_alpha(c_white,0)
with(oNode) {
    if(parent != noone) {
        var _x = view_xview[0];
        var _y = view_yview[0];
        var c = c_yellow;
        /*if(oNodeManager.active == id) {
            c = c_red;
        }*/
        //draw_circle(x-_x,y-_y,oNodeManager.detectionRange,1);
        //var offset = -1;
        //draw_line_width_color(y-_y,x-_x,parent.y-_y,parent.x-_x,4,c_orange,c_orange)
        draw_line_width_color(x-_x,y-_y,parent.x-_x,parent.y-_y,4,color,parent.color);
        
        
        if(finishLine) {
            draw_sprite_ext(sFinishLine,0,x-_x,y-_y,1,1,angleAverage,c_white,1);
        }
    }
}
surface_reset_target()

if(mouse_check_button_pressed(mb_left)) {
    /*
    var temp = first;
    active = active.child;
    first = temp.child;
    first.parent = noone;
    with(temp) {
        instance_destroy();
    }
    var new = instance_create(mouse_x,mouse_y,oNode);
    new.parent = last;
    last.child = new;
    last = new;
    */
    
    
}

var nearest = instance_nearest(active.x,active.y,oVehicle);

if(point_distance(active.x,active.y,nearest.x,nearest.y) &lt; detectionRange) {
    if(!active.finishLine){
        var temp = first;
        active = active.child;
        //Set new waypoint target for AI
        with(oVehicle) {
            target = oNodeManager.active;
        }
        first = temp.child;
        first.parent = noone;
        with(temp) {
            if(myCheckpoint) {
                instance_destroy(myCheckpoint);
            }
            instance_destroy();
        }
        var dist = random(detectionRange/2)+detectionRange
        var _x = lengthdir_x(dist, roadDirection);
        var _y = lengthdir_y(dist, roadDirection);
        var new = instance_create(last.x+_x,last.y+_y,oNode);
        //Road
        var hardTurn = 0;
        if(turnCount == 0) {
            hardTurn = choose(45,-45);
            turnCount = irandom(10)+2;
        } else {
            turnCount--;
        }
        var newDirectionDifference = irandom(30)-15+hardTurn;
        new.angleDifference = abs(newDirectionDifference);
        new.angleAverage = (roadDirection+roadDirection+newDirectionDifference)/2;
        roadDirection += newDirectionDifference;
        new.color = make_colour_hsv(colour_get_hue(background_color),min(255,new.angleDifference*5),200);
        with(new) {
            var dist = 64;
            var _x = lengthdir_x(dist,angleAverage+90);
            var _y = lengthdir_y(dist,angleAverage+90);
            var checkpoint = instance_create(x+_x,y+_y,oCheckpoint);
            checkpoint.image_angle = angleAverage;
            myCheckpoint = checkpoint;
        }
        
        
        //Parents &amp; Children
        new.parent = last;
        last.child = new;
        last = new;
        
        if(nodeCount == 0) {
            new.finishLine = true;
        }
        
        background_color = make_colour_hsv(32,32,222); //hue
        hue++;
        nodeCount--;
        
    } else {
        with(nearest) {
            winner = true;
        }
        with(oVehicle) {
            state = ai_wait;
            target = oNodeManager.last;
        }
        oRaceManager.raceFinished = true;
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Surface
if (surface_exists(rope_surface)){
    draw_surface_ext(rope_surface,view_xview[0],view_yview[0],1,1,0,c_white,1)
}
else{
    rope_surface = surface_create(view_wview[0],view_hview[0]);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
